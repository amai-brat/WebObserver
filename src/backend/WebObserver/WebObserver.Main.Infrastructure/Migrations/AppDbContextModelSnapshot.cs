// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebObserver.Main.Domain.Text;
using WebObserver.Main.Domain.YouTubePlaylist;
using WebObserver.Main.Infrastructure.Data;

#nullable disable

namespace WebObserver.Main.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UnavailableYouTubePlaylistItemYouTubePlaylistObserving", b =>
                {
                    b.Property<int>("UnavailableItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("unavailable_items_id");

                    b.Property<int>("YouTubePlaylistObservingId")
                        .HasColumnType("integer")
                        .HasColumnName("you_tube_playlist_observing_id");

                    b.HasKey("UnavailableItemsId", "YouTubePlaylistObservingId")
                        .HasName("pk_unavailable_you_tube_playlist_item_you_tube_playlist_observ");

                    b.HasIndex("YouTubePlaylistObservingId")
                        .HasDatabaseName("ix_unavailable_you_tube_playlist_item_you_tube_playlist_observ");

                    b.ToTable("unavailable_you_tube_playlist_item_you_tube_playlist_observing", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.DiffBase", b =>
                {
                    b.Property<int>("FirstEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("first_entry_id");

                    b.Property<int>("SecondEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("second_entry_id");

                    b.HasKey("FirstEntryId", "SecondEntryId");

                    b.HasIndex("SecondEntryId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cron_expression");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_observings");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_observings_template_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_observings_user_id");

                    b.ToTable("observings", (string)null);

                    b.HasDiscriminator().HasValue("ObservingBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntryBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("discriminator");

                    b.Property<int>("ObservingId")
                        .HasColumnType("integer")
                        .HasColumnName("observing_id");

                    b.Property<DateTime>("OccuredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_at");

                    b.HasKey("Id")
                        .HasName("pk_observing_entries");

                    b.ToTable("observing_entries", (string)null);

                    b.HasDiscriminator().HasValue("ObservingEntryBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingPayload", b =>
                {
                    b.Property<int>("ObservingEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("observing_entry_id");

                    b.HasKey("ObservingEntryId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_templates");

                    b.ToTable("templates", (string)null);

                    b.HasDiscriminator().HasValue("ObservingTemplate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.UnavailableYouTubePlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentItemId")
                        .HasColumnType("integer")
                        .HasColumnName("current_item_id");

                    b.Property<int?>("SavedItemId")
                        .HasColumnType("integer")
                        .HasColumnName("saved_item_id");

                    b.HasKey("Id")
                        .HasName("pk_unavailable_you_tube_playlist_item");

                    b.HasIndex("CurrentItemId")
                        .HasDatabaseName("ix_unavailable_you_tube_playlist_item_current_item_id");

                    b.HasIndex("SavedItemId")
                        .HasDatabaseName("ix_unavailable_you_tube_playlist_item_saved_item_id");

                    b.ToTable("unavailable_you_tube_playlist_item", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_id");

                    b.Property<string>("VideoOwnerChannelTitle")
                        .HasColumnType("text")
                        .HasColumnName("video_owner_channel_title");

                    b.HasKey("Id")
                        .HasName("pk_you_tube_playlist_item");

                    b.ToTable("you_tube_playlist_item", (string)null);
                });

            modelBuilder.Entity("YouTubePlaylistItemYouTubePlaylistPayload", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("items_id");

                    b.Property<int>("YouTubePlaylistPayloadObservingEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("you_tube_playlist_payload_observing_entry_id");

                    b.HasKey("ItemsId", "YouTubePlaylistPayloadObservingEntryId")
                        .HasName("pk_you_tube_playlist_item_you_tube_playlist_payload");

                    b.HasIndex("YouTubePlaylistPayloadObservingEntryId")
                        .HasDatabaseName("ix_you_tube_playlist_item_you_tube_playlist_payload_you_tube_p");

                    b.ToTable("you_tube_playlist_item_you_tube_playlist_payload", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.Diff<WebObserver.Main.Domain.Text.TextDiffPayload>", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.DiffBase");

                    b.Property<TextDiffPayload>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.ToTable("diff_text_diff_payload", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.Diff<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistDiffPayload>", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.DiffBase");

                    b.Property<YouTubePlaylistDiffPayload>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.ToTable("diff_you_tube_playlist_diff_payload", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextObserving", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingBase");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.ToTable("observings", (string)null);

                    b.HasDiscriminator().HasValue("TextObserving");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObserving", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingBase");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("playlist_id");

                    b.ToTable("observings", (string)null);

                    b.HasDiscriminator().HasValue("YouTubePlaylistObserving");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.Text.TextPayload>", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingEntryBase");

                    b.Property<int?>("LastDiffFirstEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("last_diff_first_entry_id");

                    b.Property<int?>("LastDiffSecondEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("last_diff_second_entry_id");

                    b.HasIndex("ObservingId")
                        .HasDatabaseName("ix_observing_entries_observing_id");

                    b.HasIndex("LastDiffFirstEntryId", "LastDiffSecondEntryId")
                        .HasDatabaseName("ix_observing_entries_last_diff_first_entry_id_last_diff_second1");

                    b.ToTable("observing_entries", null, t =>
                        {
                            t.Property("LastDiffFirstEntryId")
                                .HasColumnName("observing_entry_last_diff_first_entry_id");

                            t.Property("LastDiffSecondEntryId")
                                .HasColumnName("observing_entry_last_diff_second_entry_id");
                        });

                    b.HasDiscriminator().HasValue("ObservingEntry<TextPayload>");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload>", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingEntryBase");

                    b.Property<int?>("LastDiffFirstEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("last_diff_first_entry_id");

                    b.Property<int?>("LastDiffSecondEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("last_diff_second_entry_id");

                    b.HasIndex("ObservingId")
                        .HasDatabaseName("ix_observing_entries_observing_id");

                    b.HasIndex("LastDiffFirstEntryId", "LastDiffSecondEntryId")
                        .HasDatabaseName("ix_observing_entries_last_diff_first_entry_id_last_diff_second");

                    b.ToTable("observing_entries", (string)null);

                    b.HasDiscriminator().HasValue("ObservingEntry<YouTubePlaylistPayload>");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextPayload", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingPayload");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(-1)
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.ToTable("text_payload", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingPayload");

                    b.ToTable("you_tube_playlist_payload", (string)null);
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextObservingTemplate", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingTemplate");

                    b.ToTable("templates", (string)null);

                    b.HasDiscriminator().HasValue("TextObservingTemplate");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Отслеживает за текстовым файлом (не бинари)",
                            Name = "Текстовый файл"
                        });
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObservingTemplate", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingTemplate");

                    b.ToTable("templates", (string)null);

                    b.HasDiscriminator().HasValue("YouTubePlaylistObservingTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Отслеживает за изменениями YouTube плейлиста: добавление, удаление, изменение ролика, недоступность ролика",
                            Name = "YouTube плейлист"
                        });
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextObservingEntry", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.Text.TextPayload>");

                    b.ToTable("observing_entries", null, t =>
                        {
                            t.Property("LastDiffFirstEntryId")
                                .HasColumnName("observing_entry_last_diff_first_entry_id");

                            t.Property("LastDiffSecondEntryId")
                                .HasColumnName("observing_entry_last_diff_second_entry_id");
                        });

                    b.HasDiscriminator().HasValue("TextObservingEntry");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObservingEntry", b =>
                {
                    b.HasBaseType("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload>");

                    b.ToTable("observing_entries", (string)null);

                    b.HasDiscriminator().HasValue("YouTubePlaylistObservingEntry");
                });

            modelBuilder.Entity("UnavailableYouTubePlaylistItemYouTubePlaylistObserving", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.UnavailableYouTubePlaylistItem", null)
                        .WithMany()
                        .HasForeignKey("UnavailableItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unavailable_you_tube_playlist_item_you_tube_playlist_observ");

                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObserving", null)
                        .WithMany()
                        .HasForeignKey("YouTubePlaylistObservingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unavailable_you_tube_playlist_item_you_tube_playlist_observ1");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.DiffBase", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Base.ObservingEntryBase", null)
                        .WithMany()
                        .HasForeignKey("FirstEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebObserver.Main.Domain.Base.ObservingEntryBase", null)
                        .WithMany()
                        .HasForeignKey("SecondEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingBase", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Base.ObservingTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_observings_templates_template_id");

                    b.HasOne("WebObserver.Main.Domain.Entities.User", "User")
                        .WithMany("Observings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_observings_users_user_id");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingPayload", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Base.ObservingEntryBase", null)
                        .WithOne()
                        .HasForeignKey("WebObserver.Main.Domain.Base.ObservingPayload", "ObservingEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.UnavailableYouTubePlaylistItem", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistItem", "CurrentItem")
                        .WithMany()
                        .HasForeignKey("CurrentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unavailable_you_tube_playlist_item_you_tube_playlist_item_c");

                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistItem", "SavedItem")
                        .WithMany()
                        .HasForeignKey("SavedItemId")
                        .HasConstraintName("fk_unavailable_you_tube_playlist_item_you_tube_playlist_item_s");

                    b.Navigation("CurrentItem");

                    b.Navigation("SavedItem");
                });

            modelBuilder.Entity("YouTubePlaylistItemYouTubePlaylistPayload", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_you_tube_playlist_item_you_tube_playlist_payload_you_tube_p");

                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload", null)
                        .WithMany()
                        .HasForeignKey("YouTubePlaylistPayloadObservingEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_you_tube_playlist_item_you_tube_playlist_payload_you_tube_p1");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.Text.TextPayload>", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Text.TextObserving", null)
                        .WithMany("Entries")
                        .HasForeignKey("ObservingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_observing_entries_observings_observing_id");

                    b.HasOne("WebObserver.Main.Domain.Base.DiffBase", "LastDiff")
                        .WithMany()
                        .HasForeignKey("LastDiffFirstEntryId", "LastDiffSecondEntryId");

                    b.Navigation("LastDiff");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload>", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObserving", null)
                        .WithMany("Entries")
                        .HasForeignKey("ObservingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_observing_entries_observings_observing_id");

                    b.HasOne("WebObserver.Main.Domain.Base.DiffBase", "LastDiff")
                        .WithMany()
                        .HasForeignKey("LastDiffFirstEntryId", "LastDiffSecondEntryId");

                    b.Navigation("LastDiff");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextPayload", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.Text.TextPayload>", null)
                        .WithOne("Payload")
                        .HasForeignKey("WebObserver.Main.Domain.Text.TextPayload", "ObservingEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_text_payload_observing_entries_observing_entry_id");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload", b =>
                {
                    b.HasOne("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload>", null)
                        .WithOne("Payload")
                        .HasForeignKey("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload", "ObservingEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_you_tube_playlist_payload_observing_entries_observing_entry");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Entities.User", b =>
                {
                    b.Navigation("Observings");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Text.TextObserving", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistObserving", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.Text.TextPayload>", b =>
                {
                    b.Navigation("Payload");
                });

            modelBuilder.Entity("WebObserver.Main.Domain.Base.ObservingEntry<WebObserver.Main.Domain.YouTubePlaylist.YouTubePlaylistPayload>", b =>
                {
                    b.Navigation("Payload");
                });
#pragma warning restore 612, 618
        }
    }
}
